AJ-specific framework settings:

1. There are no overriding constraints THIS_superclass <: THIS_subclass. THERE SHOULD BE an overriding
constraint!

2. Calls to Object.super() are ignored (i.e., no type constraints for them).

3. Library settings: implicit parameter THIS is set to {Aliased}.
Formal parameters PARAM are set to {NonAliased} and return types are set
to {NonAliased} as well.


4. Adapt rules: {Aliased,IntAliased} |> t = t, NonAliased |> NonAliased = NonAliased, 
NonAliased |> Aliased = Error (?), NonAliased |> IntAliased = Error

5. Subtyping: IntAliased, Aliased <: NonAliased

6. Ordering: IntAliased > Aliased > NonAliased 

7. TODO! Treatment of THIS. Can be done in two ways. 
First way: we check THIS at calls x = y.m(z). But in this case 
we need NonAliased |> Aliased to be NonAliased, not error, if the adaptee 
is THIS (special case). 
Second way: we dont check THIS at calls. Then we need CHECK constraints
to make sure that if y is NonAliased, then THIS cannot be IntAliased.
Conceptually, the two ways are the same (I think). Which one
is easier to implement? 
ANA: 7 is Fixed. Added Self and IntSelf types and adapt rules for them.

8. TODO! check treatment of static methods and static fields.

9. TODO! there is a strange error when typechecking LinkedHashMap.java. had to change init to public to get around.
This might be due to the fact that we don't enforce constraints on THIS due to overriding. When we fix this, the 
error will go away I suspect.