java.lang.ApplicationShutdownHooks$1.run():@checkers.inference.reim.quals.Mutable
java.lang.ApplicationShutdownHooks.add(java.lang.Thread):@checkers.inference.reim.quals.Mutable
java.lang.ApplicationShutdownHooks.remove(java.lang.Thread):@checkers.inference.reim.quals.Mutable
java.lang.ApplicationShutdownHooks.runHooks():@checkers.inference.reim.quals.Mutable
java.lang.Character$UnicodeBlock.UnicodeBlock(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Character$UnicodeBlock.UnicodeBlock(java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Character$UnicodeBlock.UnicodeBlock(java.lang.String,java.lang.String[]):@checkers.inference.reim.quals.Mutable
java.lang.Character$UnicodeBlock.forName(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader):@checkers.inference.reim.quals.Mutable
java.lang.Class.newInstance():@checkers.inference.reim.quals.Mutable
java.lang.Class.newInstance0():@checkers.inference.reim.quals.Mutable
java.lang.Class.getClassLoader():@checkers.inference.reim.quals.Mutable
java.lang.Class.getPackage():@checkers.inference.reim.quals.Mutable
java.lang.Class.getEnclosingMethod():@checkers.inference.reim.quals.Mutable
java.lang.Class.getEnclosingConstructor():@checkers.inference.reim.quals.Mutable
java.lang.Class.getClasses():@checkers.inference.reim.quals.Mutable
java.lang.Class$2.run():@checkers.inference.reim.quals.Mutable
java.lang.Class.getFields():@checkers.inference.reim.quals.Mutable
java.lang.Class.getMethods():@checkers.inference.reim.quals.Mutable
java.lang.Class.getConstructors():@checkers.inference.reim.quals.Mutable
java.lang.Class.getField(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...):@checkers.inference.reim.quals.Mutable
java.lang.Class.getConstructor(java.lang.Class<?>...):@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredClasses():@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredFields():@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredMethods():@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredConstructors():@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredField(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...):@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...):@checkers.inference.reim.quals.Mutable
java.lang.Class.getResourceAsStream(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Class.getResource(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Class.getProtectionDomain():@checkers.inference.reim.quals.Mutable
java.lang.Class.checkMemberAccess(int,java.lang.ClassLoader):@checkers.inference.reim.quals.Mutable
java.lang.Class.privateGetPublicFields(java.util.Set):@checkers.inference.reim.quals.Mutable
java.lang.Class.addAll(java.util.Collection,java.lang.reflect.Field[]):@checkers.inference.reim.quals.Mutable
java.lang.Class.searchFields(java.lang.reflect.Field[],java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Class.getField0(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Class.searchMethods(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]):@checkers.inference.reim.quals.Mutable
java.lang.Class.getMethod0(java.lang.String,java.lang.Class[]):@checkers.inference.reim.quals.Mutable
java.lang.Class.getConstructor0(java.lang.Class[],int):@checkers.inference.reim.quals.Mutable
java.lang.Class.copyFields(java.lang.reflect.Field[]):@checkers.inference.reim.quals.Mutable
java.lang.Class.copyMethods(java.lang.reflect.Method[]):@checkers.inference.reim.quals.Mutable
java.lang.Class.copyConstructors(java.lang.reflect.Constructor[]):@checkers.inference.reim.quals.Mutable
java.lang.Class.desiredAssertionStatus():@checkers.inference.reim.quals.Mutable
java.lang.Class.getReflectionFactory():@checkers.inference.reim.quals.Mutable
java.lang.Class.getEnumConstants():@checkers.inference.reim.quals.Mutable
java.lang.Class.getEnumConstantsShared():@checkers.inference.reim.quals.Mutable
java.lang.Class.enumConstantDirectory():@checkers.inference.reim.quals.Mutable
java.lang.Class.<A>getAnnotation(java.lang.Class<A>):@checkers.inference.reim.quals.Mutable
java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>):@checkers.inference.reim.quals.Mutable
java.lang.Class.getAnnotations():@checkers.inference.reim.quals.Mutable
java.lang.Class.getDeclaredAnnotations():@checkers.inference.reim.quals.Mutable
java.lang.Class.initAnnotationsIfNecessary():@checkers.inference.reim.quals.Mutable
java.lang.Compiler$1.run():@checkers.inference.reim.quals.Mutable
java.lang.ConditionalSpecialCasing.toLowerCaseEx(java.lang.String,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.lang.ConditionalSpecialCasing.toUpperCaseEx(java.lang.String,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.lang.ConditionalSpecialCasing.toLowerCaseCharArray(java.lang.String,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.lang.ConditionalSpecialCasing.toUpperCaseCharArray(java.lang.String,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.lang.ConditionalSpecialCasing.lookUpTable(java.lang.String,int,java.util.Locale,boolean):@checkers.inference.reim.quals.Mutable
java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Integer.getAndRemoveCacheProperties():@checkers.inference.reim.quals.Mutable
java.lang.Iterable.iterator():@checkers.inference.reim.quals.Polyread
java.lang.Math.initRNG():@checkers.inference.reim.quals.Mutable
java.lang.Math.random():@checkers.inference.reim.quals.Mutable
java.lang.Object.clone():@checkers.inference.reim.quals.Mutable
java.lang.Package.getPackage(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Package.getPackages():@checkers.inference.reim.quals.Mutable
java.lang.Package.getPackage(java.lang.Class):@checkers.inference.reim.quals.Mutable
java.lang.Package.getPackageInfo():@checkers.inference.reim.quals.Mutable
java.lang.Package.<A>getAnnotation(java.lang.Class<A>):@checkers.inference.reim.quals.Mutable
java.lang.Package.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>):@checkers.inference.reim.quals.Mutable
java.lang.Package.getAnnotations():@checkers.inference.reim.quals.Mutable
java.lang.Package.getDeclaredAnnotations():@checkers.inference.reim.quals.Mutable
java.lang.Package.Package(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader):@checkers.inference.reim.quals.Mutable
java.lang.Package.getSystemPackage(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Package.getSystemPackages():@checkers.inference.reim.quals.Mutable
java.lang.Package$1.run():@checkers.inference.reim.quals.Mutable
java.lang.ProcessBuilder.environment():@checkers.inference.reim.quals.Mutable
java.lang.ProcessBuilder.environment(java.lang.String[]):@checkers.inference.reim.quals.Mutable
java.lang.ProcessBuilder.start():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment.getenv(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment.environment():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Variable.valueOfQueryOnly(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Variable.valueOfQueryOnly(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Variable.valueOf(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Variable.valueOf(byte[]):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Value.valueOfQueryOnly(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Value.valueOfQueryOnly(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Value.valueOf(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$Value.valueOf(byte[]):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.size():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.isEmpty():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.clear():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringEnvironment.containsKey(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.containsValue(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEnvironment.keySet():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringEnvironment.entrySet():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringEnvironment.values():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringEnvironment.toEnvironmentBlock(int[]):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment.toEnvironmentBlock(java.util.Map<java.lang.String,java.lang.String>,int[]):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntry.getKey():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntry.getValue():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntry.setValue(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntry.toString():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet.size():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet.isEmpty():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet.clear():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringEntrySet.iterator():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringEntrySet$1.hasNext():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet$1.next():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet$2.getKey():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet$2.getValue():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringEntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringValues.size():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringValues.isEmpty():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringValues.clear():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringValues.iterator():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringValues$1.hasNext():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringValues$1.next():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringValues.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringValues.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringKeySet.size():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringKeySet.isEmpty():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringKeySet.clear():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringKeySet.iterator():@checkers.inference.reim.quals.Polyread
java.lang.ProcessEnvironment$StringKeySet$1.hasNext():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringKeySet$1.next():@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringKeySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessEnvironment$StringKeySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.ProcessImpl.getEncodedBytes(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessImpl.toCString(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ProcessImpl.start(java.lang.String[],java.util.Map<java.lang.String,java.lang.String>,java.lang.String,boolean):@checkers.inference.reim.quals.Mutable
java.lang.Runnable.run():@checkers.inference.reim.quals.Mutable
java.lang.Runtime.exit(int):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.addShutdownHook(java.lang.Thread):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.removeShutdownHook(java.lang.Thread):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.runFinalizersOnExit(boolean):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.exec(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.exec(java.lang.String,java.lang.String[]):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.exec(java.lang.String,java.lang.String[],java.io.File):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.exec(java.lang.String[]):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.exec(java.lang.String[],java.lang.String[]):@checkers.inference.reim.quals.Mutable
java.lang.Runtime.exec(java.lang.String[],java.lang.String[],java.io.File):@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.hasAllPermission():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.currentClassLoader():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.currentLoadedClass():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.classLoaderDepth():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.inClassLoader():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkCreateClassLoader():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.getRootGroup():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkAccess(java.lang.Thread):@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkAccess(java.lang.ThreadGroup):@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkListen(int):@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkSystemClipboardAccess():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkAwtEventQueueAccess():@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkPackageAccess(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkPackageDefinition(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.SecurityManager.checkMemberAccess(java.lang.Class<?>,int):@checkers.inference.reim.quals.Mutable
java.lang.Shutdown.setRunFinalizersOnExit(boolean):@checkers.inference.reim.quals.Mutable
java.lang.Shutdown.add(int,java.lang.Runnable):@checkers.inference.reim.quals.Mutable
java.lang.Shutdown.runHooks():@checkers.inference.reim.quals.Mutable
java.lang.Shutdown.sequence():@checkers.inference.reim.quals.Mutable
java.lang.Shutdown.exit(int):@checkers.inference.reim.quals.Mutable
java.lang.Shutdown.shutdown():@checkers.inference.reim.quals.Mutable
java.lang.StrictMath.initRNG():@checkers.inference.reim.quals.Mutable
java.lang.StrictMath.random():@checkers.inference.reim.quals.Mutable
java.lang.String.String(byte[],int,int,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.String.String(byte[],int,int,java.nio.charset.Charset):@checkers.inference.reim.quals.Mutable
java.lang.String.String(byte[],java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.String.String(byte[],java.nio.charset.Charset):@checkers.inference.reim.quals.Mutable
java.lang.String.String(byte[],int,int):@checkers.inference.reim.quals.Mutable
java.lang.String.String(byte[]):@checkers.inference.reim.quals.Mutable
java.lang.String.getBytes(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.String.getBytes(java.nio.charset.Charset):@checkers.inference.reim.quals.Mutable
java.lang.String.getBytes():@checkers.inference.reim.quals.Mutable
java.lang.String.compareToIgnoreCase(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.String.toLowerCase(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.lang.String.toLowerCase():@checkers.inference.reim.quals.Mutable
java.lang.String.toUpperCase(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.lang.String.toUpperCase():@checkers.inference.reim.quals.Mutable
java.lang.String.format(java.lang.String,java.lang.Object...):@checkers.inference.reim.quals.Mutable
java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding.warnUnsupportedCharset(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding$StringDecoder.StringDecoder(java.nio.charset.Charset,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding.decode(java.lang.String,byte[],int,int):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding.decode(java.nio.charset.Charset,byte[],int,int):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding.decode(byte[],int,int):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding$StringEncoder.StringEncoder(java.nio.charset.Charset,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding.encode(java.lang.String,char[],int,int):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding.encode(java.nio.charset.Charset,char[],int,int):@checkers.inference.reim.quals.Mutable
java.lang.StringCoding.encode(char[],int,int):@checkers.inference.reim.quals.Mutable
java.lang.System.console():@checkers.inference.reim.quals.Mutable
java.lang.System.setSecurityManager(java.lang.SecurityManager):@checkers.inference.reim.quals.Mutable
java.lang.System.setSecurityManager0(java.lang.SecurityManager):@checkers.inference.reim.quals.Mutable
java.lang.System$1.run():@checkers.inference.reim.quals.Mutable
java.lang.System.getProperties():@checkers.inference.reim.quals.Polyread
java.lang.System.adjustPropertiesForBackwardCompatibility(java.util.Properties):@checkers.inference.reim.quals.Mutable
java.lang.System.setProperties(java.util.Properties):@checkers.inference.reim.quals.Mutable
java.lang.System.setProperty(java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.System.clearProperty(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.System.getenv(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.System.exit(int):@checkers.inference.reim.quals.Mutable
java.lang.System.runFinalizersOnExit(boolean):@checkers.inference.reim.quals.Mutable
java.lang.System.initializeSystemClass():@checkers.inference.reim.quals.Mutable
java.lang.System$2.<E>getEnumConstantsShared(java.lang.Class<E>):@checkers.inference.reim.quals.Mutable
java.lang.System$2.registerShutdownHook(int,java.lang.Runnable):@checkers.inference.reim.quals.Mutable
java.lang.Terminator.setup():@checkers.inference.reim.quals.Mutable
java.lang.Terminator$1.handle(sun.misc.Signal):@checkers.inference.reim.quals.Mutable
java.lang.Thread.nextThreadNum():@checkers.inference.reim.quals.Mutable
java.lang.Thread.nextThreadID():@checkers.inference.reim.quals.Mutable
java.lang.Thread.init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,boolean):@checkers.inference.reim.quals.Mutable
java.lang.Thread.clone():@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread():@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.Runnable):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,boolean):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.String,boolean):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.Runnable,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long):@checkers.inference.reim.quals.Mutable
java.lang.Thread.run():@checkers.inference.reim.quals.Mutable
java.lang.Thread.exit():@checkers.inference.reim.quals.Mutable
java.lang.Thread.stop():@checkers.inference.reim.quals.Mutable
java.lang.Thread.stop(java.lang.Throwable):@checkers.inference.reim.quals.Mutable
java.lang.Thread.stop1(java.lang.Throwable):@checkers.inference.reim.quals.Mutable
java.lang.Thread.interrupt():@checkers.inference.reim.quals.Mutable
java.lang.Thread.suspend():@checkers.inference.reim.quals.Mutable
java.lang.Thread.resume():@checkers.inference.reim.quals.Mutable
java.lang.Thread.setPriority(int):@checkers.inference.reim.quals.Mutable
java.lang.Thread.setName(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.Thread.enumerate(java.lang.Thread[]):@checkers.inference.reim.quals.Mutable
java.lang.Thread.dumpStack():@checkers.inference.reim.quals.Mutable
java.lang.Thread.setDaemon(boolean):@checkers.inference.reim.quals.Mutable
java.lang.Thread.checkAccess():@checkers.inference.reim.quals.Mutable
java.lang.Thread.getContextClassLoader():@checkers.inference.reim.quals.Mutable
java.lang.Thread.getStackTrace():@checkers.inference.reim.quals.Mutable
java.lang.Thread.getAllStackTraces():@checkers.inference.reim.quals.Mutable
java.lang.Thread.isCCLOverridden(java.lang.Class):@checkers.inference.reim.quals.Mutable
java.lang.Thread$1.run():@checkers.inference.reim.quals.Mutable
java.lang.Thread$UncaughtExceptionHandler.uncaughtException(java.lang.Thread,java.lang.Throwable):@checkers.inference.reim.quals.Mutable
java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler):@checkers.inference.reim.quals.Mutable
java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler):@checkers.inference.reim.quals.Mutable
java.lang.Thread.dispatchUncaughtException(java.lang.Throwable):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.ThreadGroup(java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.ThreadGroup(java.lang.ThreadGroup,java.lang.String):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.checkParentAccess(java.lang.ThreadGroup):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.getParent():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.setDaemon(boolean):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.setMaxPriority(int):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.checkAccess():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.enumerate(java.lang.Thread[]):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.enumerate(java.lang.Thread[],boolean):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[]):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[],boolean):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.stop():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.interrupt():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.suspend():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.stopOrSuspend(boolean):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.resume():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.destroy():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.remove(java.lang.ThreadGroup):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.remove(java.lang.Thread):@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.list():@checkers.inference.reim.quals.Mutable
java.lang.ThreadGroup.uncaughtException(java.lang.Thread,java.lang.Throwable):@checkers.inference.reim.quals.Mutable
java.lang.ThreadLocal.nextHashCode():@checkers.inference.reim.quals.Mutable
java.lang.Throwable.getMessage():@checkers.inference.reim.quals.Mutable
java.lang.Throwable.getLocalizedMessage():@checkers.inference.reim.quals.Mutable
java.lang.Throwable.toString():@checkers.inference.reim.quals.Mutable
java.lang.Throwable.printStackTrace():@checkers.inference.reim.quals.Mutable
java.lang.UNIXProcess$2.run():@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.toArray():@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.<T>finishToArray(T[],java.util.Iterator<?>):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.add(E):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.clear():@checkers.inference.reim.quals.Mutable
java.util.AbstractCollection.toString():@checkers.inference.reim.quals.Mutable
java.util.AbstractList.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.AbstractList.hashCode():@checkers.inference.reim.quals.Mutable
java.util.SubList.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.SubList.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.size():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.containsValue(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.containsKey(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.get(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.put(K,V):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.clear():@checkers.inference.reim.quals.Polyread
java.util.AbstractMap.keySet():@checkers.inference.reim.quals.Polyread
java.util.AbstractMap$1.iterator():@checkers.inference.reim.quals.Polyread
java.util.AbstractMap$1$1.hasNext():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$1$1.next():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$1.size():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$1.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.values():@checkers.inference.reim.quals.Polyread
java.util.AbstractMap$2.iterator():@checkers.inference.reim.quals.Polyread
java.util.AbstractMap$2$1.hasNext():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$2$1.next():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$2.size():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$2.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.hashCode():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.toString():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap.clone():@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$SimpleEntry.SimpleEntry(java.util.Map.Entry<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$SimpleEntry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$SimpleImmutableEntry.SimpleImmutableEntry(java.util.Map.Entry<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.AbstractMap$SimpleImmutableEntry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractQueue.clear():@checkers.inference.reim.quals.Mutable
java.util.AbstractQueue.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.AbstractSequentialList.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.AbstractSet.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.AbstractSet.hashCode():@checkers.inference.reim.quals.Mutable
java.util.AbstractSet.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.ArrayDeque.ArrayDeque(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.ArrayDeque.clone():@checkers.inference.reim.quals.Mutable
java.util.ArrayList.ArrayList(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.ArrayList.clone():@checkers.inference.reim.quals.Mutable
java.util.ArrayList.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.ArrayList.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Arrays.deepToString(java.lang.Object[]):@checkers.inference.reim.quals.Mutable
java.util.Arrays.deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set<java.lang.Object[]>):@checkers.inference.reim.quals.Mutable
java.util.BitSet.clone():@checkers.inference.reim.quals.Mutable
java.util.Calendar.Calendar():@checkers.inference.reim.quals.Mutable
java.util.Calendar.Calendar(java.util.TimeZone,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getInstance():@checkers.inference.reim.quals.Mutable
java.util.Calendar.getInstance(java.util.TimeZone):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getInstance(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.createCalendar(java.util.TimeZone,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.computeTime():@checkers.inference.reim.quals.Mutable
java.util.Calendar.computeFields():@checkers.inference.reim.quals.Mutable
java.util.Calendar.getTime():@checkers.inference.reim.quals.Mutable
java.util.Calendar.setTime(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getTimeInMillis():@checkers.inference.reim.quals.Mutable
java.util.Calendar.setTimeInMillis(long):@checkers.inference.reim.quals.Mutable
java.util.Calendar.get(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.set(int,int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.set(int,int,int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.set(int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.set(int,int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getDisplayName(int,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getDisplayNames(int,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getDisplayNamesImpl(int,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.complete():@checkers.inference.reim.quals.Mutable
java.util.Calendar.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Calendar.hashCode():@checkers.inference.reim.quals.Mutable
java.util.Calendar.compareTo(java.util.Calendar):@checkers.inference.reim.quals.Mutable
java.util.Calendar.add(int,int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.roll(int,boolean):@checkers.inference.reim.quals.Mutable
java.util.Calendar.roll(int,int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getTimeZone():@checkers.inference.reim.quals.Mutable
java.util.Calendar.setFirstDayOfWeek(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.setMinimalDaysInFirstWeek(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getGreatestMinimum(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getLeastMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getActualMinimum(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getActualMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.Calendar.clone():@checkers.inference.reim.quals.Mutable
java.util.Calendar.setWeekCountData(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Calendar.updateTime():@checkers.inference.reim.quals.Mutable
java.util.Calendar.compareTo(long):@checkers.inference.reim.quals.Mutable
java.util.Calendar.getMillisOf(java.util.Calendar):@checkers.inference.reim.quals.Mutable
java.util.Calendar.invalidateWeekFields():@checkers.inference.reim.quals.Mutable
java.util.Calendar.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.Calendar.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.Collection.size():@checkers.inference.reim.quals.Mutable
java.util.Collection.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collection.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collection.iterator():@checkers.inference.reim.quals.Polyread
java.util.Collection.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collection.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collection.add(E):@checkers.inference.reim.quals.Mutable
java.util.Collection.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collection.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collection.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Collection.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collection.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collection.clear():@checkers.inference.reim.quals.Mutable
java.util.Collections.shuffle(java.util.List<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>min(java.util.Collection<? extends T>):@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>min(java.util.Collection<? extends T>,java.util.Comparator<? super T>):@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>max(java.util.Collection<? extends T>):@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>max(java.util.Collection<? extends T>,java.util.Comparator<? super T>):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection.iterator():@checkers.inference.reim.quals.Polyread
java.util.Collections$UnmodifiableCollection$1.hasNext():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection$1.next():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableCollection.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap.containsKey(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap.containsValue(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap.get(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap.keySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$UnmodifiableMap.entrySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$UnmodifiableMap.values():@checkers.inference.reim.quals.Polyread
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator():@checkers.inference.reim.quals.Polyread
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue():@checkers.inference.reim.quals.Mutable
java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.iterator():@checkers.inference.reim.quals.Polyread
java.util.Collections$SynchronizedCollection.add(E):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedCollection.clear():@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedList.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.containsKey(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.containsValue(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.get(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.put(K,V):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SynchronizedMap.clear():@checkers.inference.reim.quals.Polyread
java.util.Collections$SynchronizedMap.keySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$SynchronizedMap.entrySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$SynchronizedMap.values():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedCollection.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.clear():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.iterator():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedCollection$1.hasNext():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection$1.next():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.add(E):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedCollection.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedList.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.containsKey(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.containsValue(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.get(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.clear():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedMap.keySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedMap.values():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedMap.put(K,V):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap.entrySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedMap$CheckedEntrySet.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.clear():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedMap$CheckedEntrySet.iterator():@checkers.inference.reim.quals.Polyread
java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet$1.next():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.getKey():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.getValue():@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.setValue(V):@checkers.inference.reim.quals.Mutable
java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>emptySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$EmptyMap.keySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$EmptyMap.values():@checkers.inference.reim.quals.Polyread
java.util.Collections$EmptyMap.entrySet():@checkers.inference.reim.quals.Polyread
java.util.Collections$EmptyMap.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>reverseOrder():@checkers.inference.reim.quals.Polyread
java.util.Collections.<T>reverseOrder(java.util.Comparator<T>):@checkers.inference.reim.quals.Polyread
java.util.Collections.<T>enumeration(java.util.Collection<T>):@checkers.inference.reim.quals.Polyread
java.util.Collections$1.hasMoreElements():@checkers.inference.reim.quals.Mutable
java.util.Collections$1.nextElement():@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>list(java.util.Enumeration<T>):@checkers.inference.reim.quals.Mutable
java.util.Collections.disjoint(java.util.Collection<?>,java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections.<T>addAll(java.util.Collection<? super T>,T...):@checkers.inference.reim.quals.Mutable
java.util.Collections.<E>newSetFromMap(java.util.Map<E,java.lang.Boolean>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.SetFromMap(java.util.Map<E,java.lang.Boolean>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.clear():@checkers.inference.reim.quals.Polyread
java.util.Collections$SetFromMap.size():@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.add(E):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.iterator():@checkers.inference.reim.quals.Polyread
java.util.Collections$SetFromMap.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$SetFromMap.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Polyread
java.util.Collections$AsLIFOQueue.clear():@checkers.inference.reim.quals.Mutable
java.util.Collections$AsLIFOQueue.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Collections$AsLIFOQueue.toArray():@checkers.inference.reim.quals.Mutable
java.util.Collections$AsLIFOQueue.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Collections$AsLIFOQueue.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$AsLIFOQueue.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Collections$AsLIFOQueue.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Currency$1.run():@checkers.inference.reim.quals.Mutable
java.util.Currency.getInstance(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Currency.getInstance(java.lang.String,int):@checkers.inference.reim.quals.Mutable
java.util.Currency.getInstance(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Currency.getSymbol():@checkers.inference.reim.quals.Mutable
java.util.Currency.getSymbol(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Currency.readResolve():@checkers.inference.reim.quals.Mutable
java.util.Date.Date(int,int,int):@checkers.inference.reim.quals.Mutable
java.util.Date.Date(int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.Date.Date(int,int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.Date.Date(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Date.clone():@checkers.inference.reim.quals.Mutable
java.util.Date.UTC(int,int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.Date.parse(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Date.getYear():@checkers.inference.reim.quals.Mutable
java.util.Date.setYear(int):@checkers.inference.reim.quals.Mutable
java.util.Date.getMonth():@checkers.inference.reim.quals.Mutable
java.util.Date.setMonth(int):@checkers.inference.reim.quals.Mutable
java.util.Date.getDate():@checkers.inference.reim.quals.Mutable
java.util.Date.setDate(int):@checkers.inference.reim.quals.Mutable
java.util.Date.getDay():@checkers.inference.reim.quals.Mutable
java.util.Date.getHours():@checkers.inference.reim.quals.Mutable
java.util.Date.setHours(int):@checkers.inference.reim.quals.Mutable
java.util.Date.getMinutes():@checkers.inference.reim.quals.Mutable
java.util.Date.setMinutes(int):@checkers.inference.reim.quals.Mutable
java.util.Date.getSeconds():@checkers.inference.reim.quals.Mutable
java.util.Date.setSeconds(int):@checkers.inference.reim.quals.Mutable
java.util.Date.getTime():@checkers.inference.reim.quals.Mutable
java.util.Date.getTimeImpl():@checkers.inference.reim.quals.Mutable
java.util.Date.before(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.Date.after(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.Date.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Date.getMillisOf(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.Date.compareTo(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.Date.hashCode():@checkers.inference.reim.quals.Mutable
java.util.Date.toString():@checkers.inference.reim.quals.Mutable
java.util.Date.toGMTString():@checkers.inference.reim.quals.Mutable
java.util.Date.getTimezoneOffset():@checkers.inference.reim.quals.Mutable
java.util.Date.getCalendarDate():@checkers.inference.reim.quals.Mutable
java.util.Date.normalize():@checkers.inference.reim.quals.Mutable
java.util.Date.normalize(sun.util.calendar.BaseCalendar.Date):@checkers.inference.reim.quals.Mutable
java.util.Date.getCalendarSystem(int):@checkers.inference.reim.quals.Mutable
java.util.Date.getCalendarSystem(long):@checkers.inference.reim.quals.Mutable
java.util.Date.getCalendarSystem(sun.util.calendar.BaseCalendar.Date):@checkers.inference.reim.quals.Polyread
java.util.Date.getJulianCalendar():@checkers.inference.reim.quals.Mutable
java.util.Date.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.Dictionary.keys():@checkers.inference.reim.quals.Polyread
java.util.Dictionary.elements():@checkers.inference.reim.quals.Polyread
java.util.DuplicateFormatFlagsException.getMessage():@checkers.inference.reim.quals.Mutable
java.util.EnumMap.maskNull(java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.EnumMap.EnumMap(java.lang.Class<K>):@checkers.inference.reim.quals.Mutable
java.util.EnumMap.EnumMap(java.util.Map<K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.EnumMap.containsValue(java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.EnumMap.containsMapping(java.lang.Object,java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.EnumMap.put(K,V):@checkers.inference.reim.quals.Polyread
java.util.EnumMap.removeMapping(java.lang.Object,java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.EnumMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.EnumMap$Values.contains(java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.EnumMap$Values.remove(java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.EnumMap$EntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.EnumMap$EntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.EnumMap$EntryIterator.setValue(V):@checkers.inference.reim.quals.Polyread
java.util.EnumMap$EntryIterator.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.EnumMap.clone():@checkers.inference.reim.quals.Mutable
java.util.EnumMap.<K>getKeyUniverse(java.lang.Class<K>):@checkers.inference.reim.quals.Mutable
java.util.EnumMap.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.EnumMap.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>noneOf(java.lang.Class<E>):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>allOf(java.lang.Class<E>):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>copyOf(java.util.EnumSet<E>):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>copyOf(java.util.Collection<E>):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>complementOf(java.util.EnumSet<E>):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>of(E):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>of(E,E):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>of(E,E,E):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>of(E,E,E,E):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>of(E,E,E,E,E):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>of(E,E...):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>range(E,E):@checkers.inference.reim.quals.Mutable
java.util.EnumSet.clone():@checkers.inference.reim.quals.Mutable
java.util.EnumSet.<E>getUniverse(java.lang.Class<E>):@checkers.inference.reim.quals.Mutable
java.util.EnumSet$SerializationProxy.SerializationProxy(java.util.EnumSet<E>):@checkers.inference.reim.quals.Mutable
java.util.EnumSet$SerializationProxy.readResolve():@checkers.inference.reim.quals.Mutable
java.util.EnumSet.writeReplace():@checkers.inference.reim.quals.Mutable
java.util.Enumeration.hasMoreElements():@checkers.inference.reim.quals.Mutable
java.util.Enumeration.nextElement():@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter():@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.lang.Appendable):@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.io.File):@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.io.File,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.io.PrintStream):@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.io.OutputStream):@checkers.inference.reim.quals.Mutable
java.util.Formatter.Formatter(java.io.OutputStream,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Formatter.format(java.lang.String,java.lang.Object...):@checkers.inference.reim.quals.Mutable
java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object...):@checkers.inference.reim.quals.Mutable
java.util.Formatter.parse(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatString.print(java.lang.Object,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.lang.Object,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.printInteger(java.lang.Object,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.printFloat(java.lang.Object,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.printDateTime(java.lang.Object,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.printCharacter(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.printString(java.lang.Object,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.printBoolean(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.printHashCode(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(byte,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(short,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(long,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.math.BigInteger,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(float,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(double,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter.Flags,char,int,boolean):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.math.BigDecimal,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter.Flags,char,int,boolean):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.util.Calendar,char,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Formatter$FormatSpecifier.print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar(java.util.TimeZone):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar(java.util.TimeZone,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar(int,int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar(int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar(int,int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.GregorianCalendar(int,int,int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.setGregorianChange(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.setGregorianChange(long):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.isLeapYear(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.add(int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.roll(int,boolean):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.roll(int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getGreatestMinimum(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getLeastMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getActualMinimum(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getActualMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.clone():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getTimeZone():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.computeFields():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.computeFields(int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.computeTime():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getFixedDate(sun.util.calendar.BaseCalendar,int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getNormalizedCalendar():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getJulianCalendarSystem():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getCutoverCalendarSystem():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getFixedDateJan1(sun.util.calendar.BaseCalendar.Date,long):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getFixedDateMonth1(sun.util.calendar.BaseCalendar.Date,long):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getCalendarDate(long):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getGregorianCutoverDate():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.getLastJulianDate():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.monthLength(int,int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.monthLength(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.actualMonthLength():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.yearLength(int):@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.yearLength():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.pinDayOfMonth():@checkers.inference.reim.quals.Mutable
java.util.GregorianCalendar.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.HashMap.HashMap(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.HashMap.putAllForCreate(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.HashMap.removeMapping(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.HashMap.clone():@checkers.inference.reim.quals.Mutable
java.util.HashMap$Entry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.HashMap$EntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.HashMap$EntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.HashMap.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.HashSet.HashSet(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.HashSet.iterator():@checkers.inference.reim.quals.Polyread
java.util.HashSet.add(E):@checkers.inference.reim.quals.Mutable
java.util.HashSet.clone():@checkers.inference.reim.quals.Mutable
java.util.HashSet.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.HashSet.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.Hashtable.Hashtable(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.Hashtable.keys():@checkers.inference.reim.quals.Polyread
java.util.Hashtable.elements():@checkers.inference.reim.quals.Polyread
java.util.Hashtable.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.Hashtable.clone():@checkers.inference.reim.quals.Mutable
java.util.Hashtable.toString():@checkers.inference.reim.quals.Mutable
java.util.Hashtable.<T>getEnumeration(int):@checkers.inference.reim.quals.Polyread
java.util.Hashtable.<T>getIterator(int):@checkers.inference.reim.quals.Polyread
java.util.Hashtable$KeySet.iterator():@checkers.inference.reim.quals.Polyread
java.util.Hashtable$EntrySet.iterator():@checkers.inference.reim.quals.Polyread
java.util.Hashtable$EntrySet.add(java.util.Map.Entry<K,V>):@checkers.inference.reim.quals.Mutable
java.util.Hashtable$EntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Hashtable$EntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Hashtable$ValueCollection.iterator():@checkers.inference.reim.quals.Polyread
java.util.Hashtable.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Hashtable$Entry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap.IdentityHashMap(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap.equals(java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.IdentityHashMap.clone():@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$EntryIterator.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$KeySet.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$Values.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$EntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$EntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$EntrySet.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$EntrySet.toArray():@checkers.inference.reim.quals.Mutable
java.util.IdentityHashMap$EntrySet.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.IllegalFormatCodePointException.getMessage():@checkers.inference.reim.quals.Mutable
java.util.IllegalFormatConversionException.getMessage():@checkers.inference.reim.quals.Mutable
java.util.Iterator.hasNext():@checkers.inference.reim.quals.Mutable
java.util.Iterator.next():@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.JapaneseImperialCalendar(java.util.TimeZone,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.add(int,int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.roll(int,boolean):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.roll(int,int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getDisplayName(int,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getDisplayNames(int,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getDisplayNamesImpl(int,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getKey(int,int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getLeastMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getActualMinimum(int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getActualMaximum(int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getYearOffsetInMillis(sun.util.calendar.CalendarDate):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.clone():@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getTimeZone():@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.computeFields():@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.computeFields(int,int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.computeTime():@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getFixedDate(int,int,int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getFixedDateJan1(sun.util.calendar.LocalGregorianCalendar.Date,long):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getFixedDateMonth1(sun.util.calendar.LocalGregorianCalendar.Date,long):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getCalendarDate(long):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.actualMonthLength():@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getTransitionEraIndex(sun.util.calendar.LocalGregorianCalendar.Date):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.isTransitionYear(int):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.getNormalizedCalendar():@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.pinDayOfMonth(sun.util.calendar.LocalGregorianCalendar.Date):@checkers.inference.reim.quals.Mutable
java.util.JapaneseImperialCalendar.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.JumboEnumSet.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.JumboEnumSet.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.JumboEnumSet.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.JumboEnumSet.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.JumboEnumSet.clone():@checkers.inference.reim.quals.Mutable
java.util.LinkedHashMap.LinkedHashMap(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.LinkedHashSet.LinkedHashSet(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.LinkedList.LinkedList(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.LinkedList.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.LinkedList.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.LinkedList.clone():@checkers.inference.reim.quals.Mutable
java.util.List.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.List.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.List.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.List.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.List.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.ListResourceBundle.handleGetObject(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ListResourceBundle.getKeys():@checkers.inference.reim.quals.Polyread
java.util.ListResourceBundle.handleKeySet():@checkers.inference.reim.quals.Polyread
java.util.Locale.createSingleton(java.lang.String,java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Locale.getInstance(java.lang.String,java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Locale.getDefault():@checkers.inference.reim.quals.Mutable
java.util.Locale.setDefault(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Locale.getISOCountries():@checkers.inference.reim.quals.Mutable
java.util.Locale.getISOLanguages():@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayLanguage():@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayLanguage(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayCountry():@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayCountry(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayString(java.lang.String,java.util.Locale,int):@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayVariant():@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayVariant(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayName():@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayName(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Locale.clone():@checkers.inference.reim.quals.Mutable
java.util.Locale.getDisplayVariantArray(sun.util.resources.OpenListResourceBundle,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.Locale.readResolve():@checkers.inference.reim.quals.Mutable
java.util.Map.size():@checkers.inference.reim.quals.Mutable
java.util.Map.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Map.containsKey(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Map.containsValue(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Map.get(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Map.put(K,V):@checkers.inference.reim.quals.Mutable
java.util.Map.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Map.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.Map.clear():@checkers.inference.reim.quals.Polyread
java.util.Map.keySet():@checkers.inference.reim.quals.Polyread
java.util.Map.values():@checkers.inference.reim.quals.Polyread
java.util.Map.entrySet():@checkers.inference.reim.quals.Polyread
java.util.Map$Entry.getKey():@checkers.inference.reim.quals.Mutable
java.util.Map$Entry.getValue():@checkers.inference.reim.quals.Mutable
java.util.Map$Entry.setValue(V):@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.lowerEntry(K):@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.floorEntry(K):@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.ceilingEntry(K):@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.higherEntry(K):@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.firstEntry():@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.lastEntry():@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.pollFirstEntry():@checkers.inference.reim.quals.Mutable
java.util.NavigableMap.pollLastEntry():@checkers.inference.reim.quals.Mutable
java.util.NavigableSet.pollFirst():@checkers.inference.reim.quals.Mutable
java.util.NavigableSet.pollLast():@checkers.inference.reim.quals.Mutable
java.util.PriorityQueue.PriorityQueue(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.PriorityQueue.PriorityQueue(java.util.PriorityQueue<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.PriorityQueue.PriorityQueue(java.util.SortedSet<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.PriorityQueue.initFromCollection(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Properties.save(java.io.OutputStream,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Properties.store(java.io.Writer,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Properties.store(java.io.OutputStream,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Properties.store0(java.io.BufferedWriter,java.lang.String,boolean):@checkers.inference.reim.quals.Mutable
java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Properties.propertyNames():@checkers.inference.reim.quals.Mutable
java.util.Properties.stringPropertyNames():@checkers.inference.reim.quals.Mutable
java.util.Properties.list(java.io.PrintStream):@checkers.inference.reim.quals.Mutable
java.util.Properties.list(java.io.PrintWriter):@checkers.inference.reim.quals.Mutable
java.util.Properties.enumerate(java.util.Hashtable):@checkers.inference.reim.quals.Mutable
java.util.Properties.enumerateStringProperties(java.util.Hashtable<java.lang.String,java.lang.String>):@checkers.inference.reim.quals.Mutable
java.util.PropertyPermissionCollection.add(java.security.Permission):@checkers.inference.reim.quals.Mutable
java.util.PropertyPermissionCollection.implies(java.security.Permission):@checkers.inference.reim.quals.Mutable
java.util.PropertyPermissionCollection.elements():@checkers.inference.reim.quals.Polyread
java.util.PropertyPermissionCollection.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.PropertyPermissionCollection.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.PropertyResourceBundle.PropertyResourceBundle(java.io.InputStream):@checkers.inference.reim.quals.Mutable
java.util.PropertyResourceBundle.PropertyResourceBundle(java.io.Reader):@checkers.inference.reim.quals.Mutable
java.util.PropertyResourceBundle.handleGetObject(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.PropertyResourceBundle.getKeys():@checkers.inference.reim.quals.Polyread
java.util.PropertyResourceBundle.handleKeySet():@checkers.inference.reim.quals.Polyread
java.util.Random.Random():@checkers.inference.reim.quals.Mutable
java.util.Random.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.Random.resetSeed(long):@checkers.inference.reim.quals.Mutable
java.util.RegularEnumSet.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.RegularEnumSet.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.RegularEnumSet.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.RegularEnumSet.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getString(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getStringArray(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getObject(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getLoader():@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$RBClassLoader.loadClass(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$RBClassLoader.getResource(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$RBClassLoader.getResourceAsStream(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$CacheKey.clone():@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getBundle(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getBundle(java.lang.String,java.util.ResourceBundle.Control):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle.Control):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.findBundle(java.util.ResourceBundle.CacheKey,java.util.List<java.util.Locale>,java.util.List<java.lang.String>,int,java.util.ResourceBundle.Control,java.util.ResourceBundle):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.loadBundle(java.util.ResourceBundle.CacheKey,java.util.List<java.lang.String>,java.util.ResourceBundle.Control,boolean):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.findBundleInCache(java.util.ResourceBundle.CacheKey,java.util.ResourceBundle.Control):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.putBundleInCache(java.util.ResourceBundle.CacheKey,java.util.ResourceBundle,java.util.ResourceBundle.Control):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.clearCache():@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.clearCache(java.lang.ClassLoader):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.handleGetObject(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.getKeys():@checkers.inference.reim.quals.Polyread
java.util.ResourceBundle.containsKey(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.keySet():@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle.handleKeySet():@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$Control.getCandidateLocales(java.lang.String,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$Control.getFallbackLocale(java.lang.String,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$Control.newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean):@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$Control$1.run():@checkers.inference.reim.quals.Mutable
java.util.ResourceBundle$Control.needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long):@checkers.inference.reim.quals.Mutable
java.util.Scanner.boolPattern():@checkers.inference.reim.quals.Mutable
java.util.Scanner.separatorPattern():@checkers.inference.reim.quals.Mutable
java.util.Scanner.linePattern():@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.lang.Readable,java.util.regex.Pattern):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.lang.Readable):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.io.InputStream):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.io.InputStream,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.io.File):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.io.File,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.nio.channels.ReadableByteChannel):@checkers.inference.reim.quals.Mutable
java.util.Scanner.Scanner(java.nio.channels.ReadableByteChannel,java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.getCompleteTokenInBuffer(java.util.regex.Pattern):@checkers.inference.reim.quals.Mutable
java.util.Scanner.next():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNext(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.next(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNext(java.util.regex.Pattern):@checkers.inference.reim.quals.Mutable
java.util.Scanner.next(java.util.regex.Pattern):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextLine():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextLine():@checkers.inference.reim.quals.Mutable
java.util.Scanner.findInLine(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.findInLine(java.util.regex.Pattern):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextBoolean():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextBoolean():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextByte():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextByte(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextByte():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextByte(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextShort():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextShort(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextShort():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextShort(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextInt():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextInt(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextInt():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextInt(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextLong():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextLong(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextLong():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextLong(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.processFloatToken(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextFloat():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextFloat():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextDouble():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextDouble():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextBigInteger():@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextBigInteger(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextBigInteger():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextBigInteger(int):@checkers.inference.reim.quals.Mutable
java.util.Scanner.hasNextBigDecimal():@checkers.inference.reim.quals.Mutable
java.util.Scanner.nextBigDecimal():@checkers.inference.reim.quals.Mutable
java.util.Scanner.reset():@checkers.inference.reim.quals.Mutable
java.util.ServiceLoader$LazyIterator.hasNext():@checkers.inference.reim.quals.Mutable
java.util.ServiceLoader$LazyIterator.next():@checkers.inference.reim.quals.Mutable
java.util.ServiceLoader.iterator():@checkers.inference.reim.quals.Polyread
java.util.ServiceLoader$1.hasNext():@checkers.inference.reim.quals.Mutable
java.util.ServiceLoader$1.next():@checkers.inference.reim.quals.Mutable
java.util.ServiceLoader.<S>load(java.lang.Class<S>):@checkers.inference.reim.quals.Mutable
java.util.Set.size():@checkers.inference.reim.quals.Mutable
java.util.Set.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.Set.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Set.iterator():@checkers.inference.reim.quals.Polyread
java.util.Set.toArray():@checkers.inference.reim.quals.Mutable
java.util.Set.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.Set.add(E):@checkers.inference.reim.quals.Mutable
java.util.Set.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.Set.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Set.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Set.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Set.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Set.clear():@checkers.inference.reim.quals.Polyread
java.util.SimpleTimeZone.getOffset(long):@checkers.inference.reim.quals.Mutable
java.util.SimpleTimeZone.getOffsets(long,int[]):@checkers.inference.reim.quals.Mutable
java.util.SimpleTimeZone.getOffset(int,int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.SimpleTimeZone.inDaylightTime(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.SimpleTimeZone.clone():@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getOffset(int,int,int,int,int,int):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getOffset(long):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getOffsets(long,int[]):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getDisplayName():@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getDisplayName(java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getDisplayName(boolean,int):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getDisplayName(boolean,int,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getDisplayNames(java.lang.String,java.util.Locale):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.inDaylightTime(java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getDefault():@checkers.inference.reim.quals.Mutable
java.util.TimeZone.getDefaultRef():@checkers.inference.reim.quals.Mutable
java.util.TimeZone.setDefaultZone():@checkers.inference.reim.quals.Mutable
java.util.TimeZone$1.run():@checkers.inference.reim.quals.Mutable
java.util.TimeZone.setDefault(java.util.TimeZone):@checkers.inference.reim.quals.Mutable
java.util.TimeZone.clone():@checkers.inference.reim.quals.Mutable
java.util.Timer.serialNumber():@checkers.inference.reim.quals.Mutable
java.util.Timer.Timer():@checkers.inference.reim.quals.Mutable
java.util.Timer.Timer(boolean):@checkers.inference.reim.quals.Mutable
java.util.Timer.Timer(java.lang.String):@checkers.inference.reim.quals.Mutable
java.util.Timer.Timer(java.lang.String,boolean):@checkers.inference.reim.quals.Mutable
java.util.Timer.schedule(java.util.TimerTask,java.util.Date):@checkers.inference.reim.quals.Mutable
java.util.Timer.schedule(java.util.TimerTask,java.util.Date,long):@checkers.inference.reim.quals.Mutable
java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long):@checkers.inference.reim.quals.Mutable
java.util.TimerThread.TimerThread(java.util.TaskQueue):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.TreeMap(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.TreeMap(java.util.SortedMap<K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.clone():@checkers.inference.reim.quals.Mutable
java.util.TreeMap.firstEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap.lastEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap.pollFirstEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap.pollLastEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap.lowerEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.floorEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.ceilingEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.higherEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$EntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$EntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$KeySet.size():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$KeySet.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$KeySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$KeySet.clear():@checkers.inference.reim.quals.Polyread
java.util.TreeMap$KeySet.pollFirst():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$KeySet.pollLast():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$KeySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.<K,V>exportEntry(java.util.TreeMap.Entry<K,V>):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.size():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.ceilingEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.higherEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.floorEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.lowerEntry(K):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.firstEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.lastEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.pollFirstEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap.pollLastEntry():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap$EntrySetView.size():@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap$EntrySetView.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$NavigableSubMap$EntrySetView.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeMap$Entry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.readTreeSet(int,java.io.ObjectInputStream,V):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.addAllForTreeSet(java.util.SortedSet<? extends K>,V):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,V):@checkers.inference.reim.quals.Mutable
java.util.TreeMap.buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,V):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.TreeSet(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.TreeSet(java.util.SortedSet<E>):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.size():@checkers.inference.reim.quals.Mutable
java.util.TreeSet.isEmpty():@checkers.inference.reim.quals.Mutable
java.util.TreeSet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.add(E):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.clear():@checkers.inference.reim.quals.Polyread
java.util.TreeSet.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.pollFirst():@checkers.inference.reim.quals.Mutable
java.util.TreeSet.pollLast():@checkers.inference.reim.quals.Mutable
java.util.TreeSet.clone():@checkers.inference.reim.quals.Mutable
java.util.TreeSet.writeObject(java.io.ObjectOutputStream):@checkers.inference.reim.quals.Mutable
java.util.TreeSet.readObject(java.io.ObjectInputStream):@checkers.inference.reim.quals.Mutable
java.util.UUID.randomUUID():@checkers.inference.reim.quals.Mutable
java.util.UnknownFormatConversionException.getMessage():@checkers.inference.reim.quals.Mutable
java.util.Vector.Vector(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Vector.clone():@checkers.inference.reim.quals.Mutable
java.util.Vector.containsAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Vector.addAll(java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.Vector.removeAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Vector.retainAll(java.util.Collection<?>):@checkers.inference.reim.quals.Mutable
java.util.Vector.addAll(int,java.util.Collection<? extends E>):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap.WeakHashMap(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap.maskNull(java.lang.Object):@checkers.inference.reim.quals.Polyread
java.util.WeakHashMap.put(K,V):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap.putAll(java.util.Map<? extends K,? extends V>):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap.removeMapping(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap$Entry.equals(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap$EntrySet.contains(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap$EntrySet.remove(java.lang.Object):@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap$EntrySet.deepCopy():@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap$EntrySet.toArray():@checkers.inference.reim.quals.Mutable
java.util.WeakHashMap$EntrySet.<T>toArray(T[]):@checkers.inference.reim.quals.Mutable
java.util.XMLUtils.save(java.util.Properties,java.io.OutputStream,java.lang.String,java.lang.String):@checkers.inference.reim.quals.Mutable
